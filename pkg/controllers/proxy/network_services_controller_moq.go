// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proxy

import (
	"github.com/mqliang/libipvs"
	"github.com/vishvananda/netlink"
	"net"
	"sync"
)

var (
	lockLinuxNetworkingMockgetKubeDummyInterface          sync.RWMutex
	lockLinuxNetworkingMockipAddrAdd                      sync.RWMutex
	lockLinuxNetworkingMockipAddrDel                      sync.RWMutex
	lockLinuxNetworkingMockipvsAddServer                  sync.RWMutex
	lockLinuxNetworkingMockipvsAddService                 sync.RWMutex
	lockLinuxNetworkingMockipvsDelDestination             sync.RWMutex
	lockLinuxNetworkingMockipvsDelService                 sync.RWMutex
	lockLinuxNetworkingMockipvsGetDestinations            sync.RWMutex
	lockLinuxNetworkingMockipvsGetServices                sync.RWMutex
	lockLinuxNetworkingMockipvsNewDestination             sync.RWMutex
	lockLinuxNetworkingMockipvsNewService                 sync.RWMutex
	lockLinuxNetworkingMockipvsUpdateDestination          sync.RWMutex
	lockLinuxNetworkingMockipvsUpdateService              sync.RWMutex
	lockLinuxNetworkingMockprepareEndpointForDsr          sync.RWMutex
	lockLinuxNetworkingMocksetupPolicyRoutingForDSR       sync.RWMutex
	lockLinuxNetworkingMocksetupRoutesForExternalIPForDSR sync.RWMutex
)

// Ensure, that LinuxNetworkingMock does implement LinuxNetworking.
// If this is not the case, regenerate this file with moq.
var _ LinuxNetworking = &LinuxNetworkingMock{}

// LinuxNetworkingMock is a mock implementation of LinuxNetworking.
//
//     func TestSomethingThatUsesLinuxNetworking(t *testing.T) {
//
//         // make and configure a mocked LinuxNetworking
//         mockedLinuxNetworking := &LinuxNetworkingMock{
//             getKubeDummyInterfaceFunc: func(refresh ...bool) (netlink.Link, error) {
// 	               panic("mock out the getKubeDummyInterface method")
//             },
//             ipAddrAddFunc: func(iface netlink.Link, ip *net.IPNet, addRoute bool) error {
// 	               panic("mock out the ipAddrAdd method")
//             },
//             ipAddrDelFunc: func(iface netlink.Link, ip *net.IPNet) error {
// 	               panic("mock out the ipAddrDel method")
//             },
//             ipvsAddServerFunc: func(ks *KubeService, ep *endpointInfo, update bool) (bool, error) {
// 	               panic("mock out the ipvsAddServer method")
//             },
//             ipvsAddServiceFunc: func(ks *KubeService, update bool) (*libipvs.Service, error) {
// 	               panic("mock out the ipvsAddService method")
//             },
//             ipvsDelDestinationFunc: func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
// 	               panic("mock out the ipvsDelDestination method")
//             },
//             ipvsDelServiceFunc: func(ks *KubeService) error {
// 	               panic("mock out the ipvsDelService method")
//             },
//             ipvsGetDestinationsFunc: func(ipvsSvc *libipvs.Service) ipvsDestinationArrayType {
// 	               panic("mock out the ipvsGetDestinations method")
//             },
//             ipvsGetServicesFunc: func() ipvsServiceArrayType {
// 	               panic("mock out the ipvsGetServices method")
//             },
//             ipvsNewDestinationFunc: func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
// 	               panic("mock out the ipvsNewDestination method")
//             },
//             ipvsNewServiceFunc: func(ks *KubeService) error {
// 	               panic("mock out the ipvsNewService method")
//             },
//             ipvsUpdateDestinationFunc: func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
// 	               panic("mock out the ipvsUpdateDestination method")
//             },
//             ipvsUpdateServiceFunc: func(ks *KubeService) error {
// 	               panic("mock out the ipvsUpdateService method")
//             },
//             prepareEndpointForDsrFunc: func(containerId string, endpointIP net.IP, vip string, svcPort string, dstPort string) error {
// 	               panic("mock out the prepareEndpointForDsr method")
//             },
//             setupPolicyRoutingForDSRFunc: func() error {
// 	               panic("mock out the setupPolicyRoutingForDSR method")
//             },
//             setupRoutesForExternalIPForDSRFunc: func(in1 *serviceInfoMapType) error {
// 	               panic("mock out the setupRoutesForExternalIPForDSR method")
//             },
//         }
//
//         // use mockedLinuxNetworking in code that requires LinuxNetworking
//         // and then make assertions.
//
//     }
type LinuxNetworkingMock struct {
	// getKubeDummyInterfaceFunc mocks the getKubeDummyInterface method.
	getKubeDummyInterfaceFunc func(refresh ...bool) (netlink.Link, error)

	// ipAddrAddFunc mocks the ipAddrAdd method.
	ipAddrAddFunc func(iface netlink.Link, ip *net.IPNet, addRoute bool) error

	// ipAddrDelFunc mocks the ipAddrDel method.
	ipAddrDelFunc func(iface netlink.Link, ip *net.IPNet) error

	// ipvsAddServerFunc mocks the ipvsAddServer method.
	ipvsAddServerFunc func(ks *KubeService, ep *endpointInfo, update bool) (bool, error)

	// ipvsAddServiceFunc mocks the ipvsAddService method.
	ipvsAddServiceFunc func(ks *KubeService, update bool) (*libipvs.Service, error)

	// ipvsDelDestinationFunc mocks the ipvsDelDestination method.
	ipvsDelDestinationFunc func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error

	// ipvsDelServiceFunc mocks the ipvsDelService method.
	ipvsDelServiceFunc func(ks *KubeService) error

	// ipvsGetDestinationsFunc mocks the ipvsGetDestinations method.
	ipvsGetDestinationsFunc func(ipvsSvc *libipvs.Service) ipvsDestinationArrayType

	// ipvsGetServicesFunc mocks the ipvsGetServices method.
	ipvsGetServicesFunc func() ipvsServiceArrayType

	// ipvsNewDestinationFunc mocks the ipvsNewDestination method.
	ipvsNewDestinationFunc func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error

	// ipvsNewServiceFunc mocks the ipvsNewService method.
	ipvsNewServiceFunc func(ks *KubeService) error

	// ipvsUpdateDestinationFunc mocks the ipvsUpdateDestination method.
	ipvsUpdateDestinationFunc func(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error

	// ipvsUpdateServiceFunc mocks the ipvsUpdateService method.
	ipvsUpdateServiceFunc func(ks *KubeService) error

	// prepareEndpointForDsrFunc mocks the prepareEndpointForDsr method.
	prepareEndpointForDsrFunc func(containerId string, endpointIP net.IP, vip string, svcPort string, dstPort string) error

	// setupPolicyRoutingForDSRFunc mocks the setupPolicyRoutingForDSR method.
	setupPolicyRoutingForDSRFunc func() error

	// setupRoutesForExternalIPForDSRFunc mocks the setupRoutesForExternalIPForDSR method.
	setupRoutesForExternalIPForDSRFunc func(in1 *serviceInfoMapType) error

	// calls tracks calls to the methods.
	calls struct {
		// getKubeDummyInterface holds details about calls to the getKubeDummyInterface method.
		getKubeDummyInterface []struct {
			// Refresh is the refresh argument value.
			Refresh []bool
		}
		// ipAddrAdd holds details about calls to the ipAddrAdd method.
		ipAddrAdd []struct {
			// Iface is the iface argument value.
			Iface netlink.Link
			// IP is the ip argument value.
			IP *net.IPNet
			// AddRoute is the addRoute argument value.
			AddRoute bool
		}
		// ipAddrDel holds details about calls to the ipAddrDel method.
		ipAddrDel []struct {
			// Iface is the iface argument value.
			Iface netlink.Link
			// IP is the ip argument value.
			IP *net.IPNet
		}
		// ipvsAddServer holds details about calls to the ipvsAddServer method.
		ipvsAddServer []struct {
			// Ks is the ks argument value.
			Ks *KubeService
			// Ep is the ep argument value.
			Ep *endpointInfo
			// Update is the update argument value.
			Update bool
		}
		// ipvsAddService holds details about calls to the ipvsAddService method.
		ipvsAddService []struct {
			// Ks is the ks argument value.
			Ks *KubeService
			// Update is the update argument value.
			Update bool
		}
		// ipvsDelDestination holds details about calls to the ipvsDelDestination method.
		ipvsDelDestination []struct {
			// IpvsSvc is the ipvsSvc argument value.
			IpvsSvc *libipvs.Service
			// IpvsDst is the ipvsDst argument value.
			IpvsDst *libipvs.Destination
		}
		// ipvsDelService holds details about calls to the ipvsDelService method.
		ipvsDelService []struct {
			// Ks is the ks argument value.
			Ks *KubeService
		}
		// ipvsGetDestinations holds details about calls to the ipvsGetDestinations method.
		ipvsGetDestinations []struct {
			// IpvsSvc is the ipvsSvc argument value.
			IpvsSvc *libipvs.Service
		}
		// ipvsGetServices holds details about calls to the ipvsGetServices method.
		ipvsGetServices []struct {
		}
		// ipvsNewDestination holds details about calls to the ipvsNewDestination method.
		ipvsNewDestination []struct {
			// IpvsSvc is the ipvsSvc argument value.
			IpvsSvc *libipvs.Service
			// IpvsDst is the ipvsDst argument value.
			IpvsDst *libipvs.Destination
		}
		// ipvsNewService holds details about calls to the ipvsNewService method.
		ipvsNewService []struct {
			// Ks is the ks argument value.
			Ks *KubeService
		}
		// ipvsUpdateDestination holds details about calls to the ipvsUpdateDestination method.
		ipvsUpdateDestination []struct {
			// IpvsSvc is the ipvsSvc argument value.
			IpvsSvc *libipvs.Service
			// IpvsDst is the ipvsDst argument value.
			IpvsDst *libipvs.Destination
		}
		// ipvsUpdateService holds details about calls to the ipvsUpdateService method.
		ipvsUpdateService []struct {
			// Ks is the ks argument value.
			Ks *KubeService
		}
		// prepareEndpointForDsr holds details about calls to the prepareEndpointForDsr method.
		prepareEndpointForDsr []struct {
			// ContainerId is the containerId argument value.
			ContainerId string
			// EndpointIP is the endpointIP argument value.
			EndpointIP net.IP
			// Vip is the vip argument value.
			Vip string
			// SvcPort is the svcPort argument value.
			SvcPort string
			// DstPort is the dstPort argument value.
			DstPort string
		}
		// setupPolicyRoutingForDSR holds details about calls to the setupPolicyRoutingForDSR method.
		setupPolicyRoutingForDSR []struct {
		}
		// setupRoutesForExternalIPForDSR holds details about calls to the setupRoutesForExternalIPForDSR method.
		setupRoutesForExternalIPForDSR []struct {
			// In1 is the in1 argument value.
			In1 *serviceInfoMapType
		}
	}
}

// getKubeDummyInterface calls getKubeDummyInterfaceFunc.
func (mock *LinuxNetworkingMock) getKubeDummyInterface(refresh ...bool) (netlink.Link, error) {
	if mock.getKubeDummyInterfaceFunc == nil {
		panic("LinuxNetworkingMock.getKubeDummyInterfaceFunc: method is nil but LinuxNetworking.getKubeDummyInterface was just called")
	}
	callInfo := struct {
		Refresh []bool
	}{
		Refresh: refresh,
	}
	lockLinuxNetworkingMockgetKubeDummyInterface.Lock()
	mock.calls.getKubeDummyInterface = append(mock.calls.getKubeDummyInterface, callInfo)
	lockLinuxNetworkingMockgetKubeDummyInterface.Unlock()
	return mock.getKubeDummyInterfaceFunc(refresh...)
}

// getKubeDummyInterfaceCalls gets all the calls that were made to getKubeDummyInterface.
// Check the length with:
//     len(mockedLinuxNetworking.getKubeDummyInterfaceCalls())
func (mock *LinuxNetworkingMock) getKubeDummyInterfaceCalls() []struct {
	Refresh []bool
} {
	var calls []struct {
		Refresh []bool
	}
	lockLinuxNetworkingMockgetKubeDummyInterface.RLock()
	calls = mock.calls.getKubeDummyInterface
	lockLinuxNetworkingMockgetKubeDummyInterface.RUnlock()
	return calls
}

// ipAddrAdd calls ipAddrAddFunc.
func (mock *LinuxNetworkingMock) ipAddrAdd(iface netlink.Link, ip *net.IPNet, addRoute bool) error {
	if mock.ipAddrAddFunc == nil {
		panic("LinuxNetworkingMock.ipAddrAddFunc: method is nil but LinuxNetworking.ipAddrAdd was just called")
	}
	callInfo := struct {
		Iface    netlink.Link
		IP       *net.IPNet
		AddRoute bool
	}{
		Iface:    iface,
		IP:       ip,
		AddRoute: addRoute,
	}
	lockLinuxNetworkingMockipAddrAdd.Lock()
	mock.calls.ipAddrAdd = append(mock.calls.ipAddrAdd, callInfo)
	lockLinuxNetworkingMockipAddrAdd.Unlock()
	return mock.ipAddrAddFunc(iface, ip, addRoute)
}

// ipAddrAddCalls gets all the calls that were made to ipAddrAdd.
// Check the length with:
//     len(mockedLinuxNetworking.ipAddrAddCalls())
func (mock *LinuxNetworkingMock) ipAddrAddCalls() []struct {
	Iface    netlink.Link
	IP       *net.IPNet
	AddRoute bool
} {
	var calls []struct {
		Iface    netlink.Link
		IP       *net.IPNet
		AddRoute bool
	}
	lockLinuxNetworkingMockipAddrAdd.RLock()
	calls = mock.calls.ipAddrAdd
	lockLinuxNetworkingMockipAddrAdd.RUnlock()
	return calls
}

// ipAddrDel calls ipAddrDelFunc.
func (mock *LinuxNetworkingMock) ipAddrDel(iface netlink.Link, ip *net.IPNet) error {
	if mock.ipAddrDelFunc == nil {
		panic("LinuxNetworkingMock.ipAddrDelFunc: method is nil but LinuxNetworking.ipAddrDel was just called")
	}
	callInfo := struct {
		Iface netlink.Link
		IP    *net.IPNet
	}{
		Iface: iface,
		IP:    ip,
	}
	lockLinuxNetworkingMockipAddrDel.Lock()
	mock.calls.ipAddrDel = append(mock.calls.ipAddrDel, callInfo)
	lockLinuxNetworkingMockipAddrDel.Unlock()
	return mock.ipAddrDelFunc(iface, ip)
}

// ipAddrDelCalls gets all the calls that were made to ipAddrDel.
// Check the length with:
//     len(mockedLinuxNetworking.ipAddrDelCalls())
func (mock *LinuxNetworkingMock) ipAddrDelCalls() []struct {
	Iface netlink.Link
	IP    *net.IPNet
} {
	var calls []struct {
		Iface netlink.Link
		IP    *net.IPNet
	}
	lockLinuxNetworkingMockipAddrDel.RLock()
	calls = mock.calls.ipAddrDel
	lockLinuxNetworkingMockipAddrDel.RUnlock()
	return calls
}

// ipvsAddServer calls ipvsAddServerFunc.
func (mock *LinuxNetworkingMock) ipvsAddServer(ks *KubeService, ep *endpointInfo, update bool) (bool, error) {
	if mock.ipvsAddServerFunc == nil {
		panic("LinuxNetworkingMock.ipvsAddServerFunc: method is nil but LinuxNetworking.ipvsAddServer was just called")
	}
	callInfo := struct {
		Ks     *KubeService
		Ep     *endpointInfo
		Update bool
	}{
		Ks:     ks,
		Ep:     ep,
		Update: update,
	}
	lockLinuxNetworkingMockipvsAddServer.Lock()
	mock.calls.ipvsAddServer = append(mock.calls.ipvsAddServer, callInfo)
	lockLinuxNetworkingMockipvsAddServer.Unlock()
	return mock.ipvsAddServerFunc(ks, ep, update)
}

// ipvsAddServerCalls gets all the calls that were made to ipvsAddServer.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsAddServerCalls())
func (mock *LinuxNetworkingMock) ipvsAddServerCalls() []struct {
	Ks     *KubeService
	Ep     *endpointInfo
	Update bool
} {
	var calls []struct {
		Ks     *KubeService
		Ep     *endpointInfo
		Update bool
	}
	lockLinuxNetworkingMockipvsAddServer.RLock()
	calls = mock.calls.ipvsAddServer
	lockLinuxNetworkingMockipvsAddServer.RUnlock()
	return calls
}

// ipvsAddService calls ipvsAddServiceFunc.
func (mock *LinuxNetworkingMock) ipvsAddService(ks *KubeService, update bool) (*libipvs.Service, error) {
	if mock.ipvsAddServiceFunc == nil {
		panic("LinuxNetworkingMock.ipvsAddServiceFunc: method is nil but LinuxNetworking.ipvsAddService was just called")
	}
	callInfo := struct {
		Ks     *KubeService
		Update bool
	}{
		Ks:     ks,
		Update: update,
	}
	lockLinuxNetworkingMockipvsAddService.Lock()
	mock.calls.ipvsAddService = append(mock.calls.ipvsAddService, callInfo)
	lockLinuxNetworkingMockipvsAddService.Unlock()
	return mock.ipvsAddServiceFunc(ks, update)
}

// ipvsAddServiceCalls gets all the calls that were made to ipvsAddService.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsAddServiceCalls())
func (mock *LinuxNetworkingMock) ipvsAddServiceCalls() []struct {
	Ks     *KubeService
	Update bool
} {
	var calls []struct {
		Ks     *KubeService
		Update bool
	}
	lockLinuxNetworkingMockipvsAddService.RLock()
	calls = mock.calls.ipvsAddService
	lockLinuxNetworkingMockipvsAddService.RUnlock()
	return calls
}

// ipvsDelDestination calls ipvsDelDestinationFunc.
func (mock *LinuxNetworkingMock) ipvsDelDestination(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
	if mock.ipvsDelDestinationFunc == nil {
		panic("LinuxNetworkingMock.ipvsDelDestinationFunc: method is nil but LinuxNetworking.ipvsDelDestination was just called")
	}
	callInfo := struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}{
		IpvsSvc: ipvsSvc,
		IpvsDst: ipvsDst,
	}
	lockLinuxNetworkingMockipvsDelDestination.Lock()
	mock.calls.ipvsDelDestination = append(mock.calls.ipvsDelDestination, callInfo)
	lockLinuxNetworkingMockipvsDelDestination.Unlock()
	return mock.ipvsDelDestinationFunc(ipvsSvc, ipvsDst)
}

// ipvsDelDestinationCalls gets all the calls that were made to ipvsDelDestination.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsDelDestinationCalls())
func (mock *LinuxNetworkingMock) ipvsDelDestinationCalls() []struct {
	IpvsSvc *libipvs.Service
	IpvsDst *libipvs.Destination
} {
	var calls []struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}
	lockLinuxNetworkingMockipvsDelDestination.RLock()
	calls = mock.calls.ipvsDelDestination
	lockLinuxNetworkingMockipvsDelDestination.RUnlock()
	return calls
}

// ipvsDelService calls ipvsDelServiceFunc.
func (mock *LinuxNetworkingMock) ipvsDelService(ks *KubeService) error {
	if mock.ipvsDelServiceFunc == nil {
		panic("LinuxNetworkingMock.ipvsDelServiceFunc: method is nil but LinuxNetworking.ipvsDelService was just called")
	}
	callInfo := struct {
		Ks *KubeService
	}{
		Ks: ks,
	}
	lockLinuxNetworkingMockipvsDelService.Lock()
	mock.calls.ipvsDelService = append(mock.calls.ipvsDelService, callInfo)
	lockLinuxNetworkingMockipvsDelService.Unlock()
	return mock.ipvsDelServiceFunc(ks)
}

// ipvsDelServiceCalls gets all the calls that were made to ipvsDelService.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsDelServiceCalls())
func (mock *LinuxNetworkingMock) ipvsDelServiceCalls() []struct {
	Ks *KubeService
} {
	var calls []struct {
		Ks *KubeService
	}
	lockLinuxNetworkingMockipvsDelService.RLock()
	calls = mock.calls.ipvsDelService
	lockLinuxNetworkingMockipvsDelService.RUnlock()
	return calls
}

// ipvsGetDestinations calls ipvsGetDestinationsFunc.
func (mock *LinuxNetworkingMock) ipvsGetDestinations(ipvsSvc *libipvs.Service) ipvsDestinationArrayType {
	if mock.ipvsGetDestinationsFunc == nil {
		panic("LinuxNetworkingMock.ipvsGetDestinationsFunc: method is nil but LinuxNetworking.ipvsGetDestinations was just called")
	}
	callInfo := struct {
		IpvsSvc *libipvs.Service
	}{
		IpvsSvc: ipvsSvc,
	}
	lockLinuxNetworkingMockipvsGetDestinations.Lock()
	mock.calls.ipvsGetDestinations = append(mock.calls.ipvsGetDestinations, callInfo)
	lockLinuxNetworkingMockipvsGetDestinations.Unlock()
	return mock.ipvsGetDestinationsFunc(ipvsSvc)
}

// ipvsGetDestinationsCalls gets all the calls that were made to ipvsGetDestinations.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsGetDestinationsCalls())
func (mock *LinuxNetworkingMock) ipvsGetDestinationsCalls() []struct {
	IpvsSvc *libipvs.Service
} {
	var calls []struct {
		IpvsSvc *libipvs.Service
	}
	lockLinuxNetworkingMockipvsGetDestinations.RLock()
	calls = mock.calls.ipvsGetDestinations
	lockLinuxNetworkingMockipvsGetDestinations.RUnlock()
	return calls
}

// ipvsGetServices calls ipvsGetServicesFunc.
func (mock *LinuxNetworkingMock) ipvsGetServices() ipvsServiceArrayType {
	if mock.ipvsGetServicesFunc == nil {
		panic("LinuxNetworkingMock.ipvsGetServicesFunc: method is nil but LinuxNetworking.ipvsGetServices was just called")
	}
	callInfo := struct {
	}{}
	lockLinuxNetworkingMockipvsGetServices.Lock()
	mock.calls.ipvsGetServices = append(mock.calls.ipvsGetServices, callInfo)
	lockLinuxNetworkingMockipvsGetServices.Unlock()
	return mock.ipvsGetServicesFunc()
}

// ipvsGetServicesCalls gets all the calls that were made to ipvsGetServices.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsGetServicesCalls())
func (mock *LinuxNetworkingMock) ipvsGetServicesCalls() []struct {
} {
	var calls []struct {
	}
	lockLinuxNetworkingMockipvsGetServices.RLock()
	calls = mock.calls.ipvsGetServices
	lockLinuxNetworkingMockipvsGetServices.RUnlock()
	return calls
}

// ipvsNewDestination calls ipvsNewDestinationFunc.
func (mock *LinuxNetworkingMock) ipvsNewDestination(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
	if mock.ipvsNewDestinationFunc == nil {
		panic("LinuxNetworkingMock.ipvsNewDestinationFunc: method is nil but LinuxNetworking.ipvsNewDestination was just called")
	}
	callInfo := struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}{
		IpvsSvc: ipvsSvc,
		IpvsDst: ipvsDst,
	}
	lockLinuxNetworkingMockipvsNewDestination.Lock()
	mock.calls.ipvsNewDestination = append(mock.calls.ipvsNewDestination, callInfo)
	lockLinuxNetworkingMockipvsNewDestination.Unlock()
	return mock.ipvsNewDestinationFunc(ipvsSvc, ipvsDst)
}

// ipvsNewDestinationCalls gets all the calls that were made to ipvsNewDestination.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsNewDestinationCalls())
func (mock *LinuxNetworkingMock) ipvsNewDestinationCalls() []struct {
	IpvsSvc *libipvs.Service
	IpvsDst *libipvs.Destination
} {
	var calls []struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}
	lockLinuxNetworkingMockipvsNewDestination.RLock()
	calls = mock.calls.ipvsNewDestination
	lockLinuxNetworkingMockipvsNewDestination.RUnlock()
	return calls
}

// ipvsNewService calls ipvsNewServiceFunc.
func (mock *LinuxNetworkingMock) ipvsNewService(ks *KubeService) error {
	if mock.ipvsNewServiceFunc == nil {
		panic("LinuxNetworkingMock.ipvsNewServiceFunc: method is nil but LinuxNetworking.ipvsNewService was just called")
	}
	callInfo := struct {
		Ks *KubeService
	}{
		Ks: ks,
	}
	lockLinuxNetworkingMockipvsNewService.Lock()
	mock.calls.ipvsNewService = append(mock.calls.ipvsNewService, callInfo)
	lockLinuxNetworkingMockipvsNewService.Unlock()
	return mock.ipvsNewServiceFunc(ks)
}

// ipvsNewServiceCalls gets all the calls that were made to ipvsNewService.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsNewServiceCalls())
func (mock *LinuxNetworkingMock) ipvsNewServiceCalls() []struct {
	Ks *KubeService
} {
	var calls []struct {
		Ks *KubeService
	}
	lockLinuxNetworkingMockipvsNewService.RLock()
	calls = mock.calls.ipvsNewService
	lockLinuxNetworkingMockipvsNewService.RUnlock()
	return calls
}

// ipvsUpdateDestination calls ipvsUpdateDestinationFunc.
func (mock *LinuxNetworkingMock) ipvsUpdateDestination(ipvsSvc *libipvs.Service, ipvsDst *libipvs.Destination) error {
	if mock.ipvsUpdateDestinationFunc == nil {
		panic("LinuxNetworkingMock.ipvsUpdateDestinationFunc: method is nil but LinuxNetworking.ipvsUpdateDestination was just called")
	}
	callInfo := struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}{
		IpvsSvc: ipvsSvc,
		IpvsDst: ipvsDst,
	}
	lockLinuxNetworkingMockipvsUpdateDestination.Lock()
	mock.calls.ipvsUpdateDestination = append(mock.calls.ipvsUpdateDestination, callInfo)
	lockLinuxNetworkingMockipvsUpdateDestination.Unlock()
	return mock.ipvsUpdateDestinationFunc(ipvsSvc, ipvsDst)
}

// ipvsUpdateDestinationCalls gets all the calls that were made to ipvsUpdateDestination.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsUpdateDestinationCalls())
func (mock *LinuxNetworkingMock) ipvsUpdateDestinationCalls() []struct {
	IpvsSvc *libipvs.Service
	IpvsDst *libipvs.Destination
} {
	var calls []struct {
		IpvsSvc *libipvs.Service
		IpvsDst *libipvs.Destination
	}
	lockLinuxNetworkingMockipvsUpdateDestination.RLock()
	calls = mock.calls.ipvsUpdateDestination
	lockLinuxNetworkingMockipvsUpdateDestination.RUnlock()
	return calls
}

// ipvsUpdateService calls ipvsUpdateServiceFunc.
func (mock *LinuxNetworkingMock) ipvsUpdateService(ks *KubeService) error {
	if mock.ipvsUpdateServiceFunc == nil {
		panic("LinuxNetworkingMock.ipvsUpdateServiceFunc: method is nil but LinuxNetworking.ipvsUpdateService was just called")
	}
	callInfo := struct {
		Ks *KubeService
	}{
		Ks: ks,
	}
	lockLinuxNetworkingMockipvsUpdateService.Lock()
	mock.calls.ipvsUpdateService = append(mock.calls.ipvsUpdateService, callInfo)
	lockLinuxNetworkingMockipvsUpdateService.Unlock()
	return mock.ipvsUpdateServiceFunc(ks)
}

// ipvsUpdateServiceCalls gets all the calls that were made to ipvsUpdateService.
// Check the length with:
//     len(mockedLinuxNetworking.ipvsUpdateServiceCalls())
func (mock *LinuxNetworkingMock) ipvsUpdateServiceCalls() []struct {
	Ks *KubeService
} {
	var calls []struct {
		Ks *KubeService
	}
	lockLinuxNetworkingMockipvsUpdateService.RLock()
	calls = mock.calls.ipvsUpdateService
	lockLinuxNetworkingMockipvsUpdateService.RUnlock()
	return calls
}

// prepareEndpointForDsr calls prepareEndpointForDsrFunc.
func (mock *LinuxNetworkingMock) prepareEndpointForDsr(containerId string, endpointIP net.IP, vip string, svcPort string, dstPort string) error {
	if mock.prepareEndpointForDsrFunc == nil {
		panic("LinuxNetworkingMock.prepareEndpointForDsrFunc: method is nil but LinuxNetworking.prepareEndpointForDsr was just called")
	}
	callInfo := struct {
		ContainerId string
		EndpointIP  net.IP
		Vip         string
		SvcPort     string
		DstPort     string
	}{
		ContainerId: containerId,
		EndpointIP:  endpointIP,
		Vip:         vip,
		SvcPort:     svcPort,
		DstPort:     dstPort,
	}
	lockLinuxNetworkingMockprepareEndpointForDsr.Lock()
	mock.calls.prepareEndpointForDsr = append(mock.calls.prepareEndpointForDsr, callInfo)
	lockLinuxNetworkingMockprepareEndpointForDsr.Unlock()
	return mock.prepareEndpointForDsrFunc(containerId, endpointIP, vip, svcPort, dstPort)
}

// prepareEndpointForDsrCalls gets all the calls that were made to prepareEndpointForDsr.
// Check the length with:
//     len(mockedLinuxNetworking.prepareEndpointForDsrCalls())
func (mock *LinuxNetworkingMock) prepareEndpointForDsrCalls() []struct {
	ContainerId string
	EndpointIP  net.IP
	Vip         string
	SvcPort     string
	DstPort     string
} {
	var calls []struct {
		ContainerId string
		EndpointIP  net.IP
		Vip         string
		SvcPort     string
		DstPort     string
	}
	lockLinuxNetworkingMockprepareEndpointForDsr.RLock()
	calls = mock.calls.prepareEndpointForDsr
	lockLinuxNetworkingMockprepareEndpointForDsr.RUnlock()
	return calls
}

// setupPolicyRoutingForDSR calls setupPolicyRoutingForDSRFunc.
func (mock *LinuxNetworkingMock) setupPolicyRoutingForDSR() error {
	if mock.setupPolicyRoutingForDSRFunc == nil {
		panic("LinuxNetworkingMock.setupPolicyRoutingForDSRFunc: method is nil but LinuxNetworking.setupPolicyRoutingForDSR was just called")
	}
	callInfo := struct {
	}{}
	lockLinuxNetworkingMocksetupPolicyRoutingForDSR.Lock()
	mock.calls.setupPolicyRoutingForDSR = append(mock.calls.setupPolicyRoutingForDSR, callInfo)
	lockLinuxNetworkingMocksetupPolicyRoutingForDSR.Unlock()
	return mock.setupPolicyRoutingForDSRFunc()
}

// setupPolicyRoutingForDSRCalls gets all the calls that were made to setupPolicyRoutingForDSR.
// Check the length with:
//     len(mockedLinuxNetworking.setupPolicyRoutingForDSRCalls())
func (mock *LinuxNetworkingMock) setupPolicyRoutingForDSRCalls() []struct {
} {
	var calls []struct {
	}
	lockLinuxNetworkingMocksetupPolicyRoutingForDSR.RLock()
	calls = mock.calls.setupPolicyRoutingForDSR
	lockLinuxNetworkingMocksetupPolicyRoutingForDSR.RUnlock()
	return calls
}

// setupRoutesForExternalIPForDSR calls setupRoutesForExternalIPForDSRFunc.
func (mock *LinuxNetworkingMock) setupRoutesForExternalIPForDSR(in1 *serviceInfoMapType) error {
	if mock.setupRoutesForExternalIPForDSRFunc == nil {
		panic("LinuxNetworkingMock.setupRoutesForExternalIPForDSRFunc: method is nil but LinuxNetworking.setupRoutesForExternalIPForDSR was just called")
	}
	callInfo := struct {
		In1 *serviceInfoMapType
	}{
		In1: in1,
	}
	lockLinuxNetworkingMocksetupRoutesForExternalIPForDSR.Lock()
	mock.calls.setupRoutesForExternalIPForDSR = append(mock.calls.setupRoutesForExternalIPForDSR, callInfo)
	lockLinuxNetworkingMocksetupRoutesForExternalIPForDSR.Unlock()
	return mock.setupRoutesForExternalIPForDSRFunc(in1)
}

// setupRoutesForExternalIPForDSRCalls gets all the calls that were made to setupRoutesForExternalIPForDSR.
// Check the length with:
//     len(mockedLinuxNetworking.setupRoutesForExternalIPForDSRCalls())
func (mock *LinuxNetworkingMock) setupRoutesForExternalIPForDSRCalls() []struct {
	In1 *serviceInfoMapType
} {
	var calls []struct {
		In1 *serviceInfoMapType
	}
	lockLinuxNetworkingMocksetupRoutesForExternalIPForDSR.RLock()
	calls = mock.calls.setupRoutesForExternalIPForDSR
	lockLinuxNetworkingMocksetupRoutesForExternalIPForDSR.RUnlock()
	return calls
}
